package app.services;


import app.dto.FlightDTO;
import app.dto.FlightSeatDTO;
import app.dto.SeatDTO;
import app.dto.search.Search;
import app.entities.Aircraft;
import app.entities.Destination;
import app.entities.Flight;
import app.entities.FlightSeat;
import app.enums.Airport;
import app.enums.CategoryType;
import app.enums.FlightStatus;
import app.mappers.FlightMapper;
import app.services.interfaces.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mapstruct.factory.Mappers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.Spy;
import org.mockito.junit.jupiter.MockitoExtension;

import java.sql.Date;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.Collections;
import java.util.List;

import static org.mockito.Mockito.doReturn;

@ExtendWith(MockitoExtension.class)
public class SearchServiceImplTest {

    @Mock
    FlightMapper flightMapper;
    @Mock
    private FlightService flightService;
    @Mock
    private DestinationService destinationService;
    @Mock
    private FlightSeatService flightSeatService;
    @Mock
    private AircraftService aircraftService;
    @Mock
    TicketService ticketService;
    @InjectMocks
    private SearchServiceImpl searchService;

    FlightDTO flight1DTO;
    FlightDTO flight2DTO;
    FlightDTO flight3DTO;
    FlightDTO flight4DTO;
    FlightDTO flight5DTO;
    FlightDTO flight6DTO;
    Flight flight1;
    Flight flight2;
    Flight flight3;
    Flight flight4;
    Flight flight5;
    Flight flight6;
    Destination vnukovo;
    Destination koltcovo;
    Destination kazan;


    Search searchDirect;


    @BeforeEach
    void init() {

        vnukovo = new Destination();
        vnukovo.setId(1L);
        vnukovo.setAirportCode(Airport.VKO);
        vnukovo.setCityName("Москва");
        vnukovo.setTimezone("GMT +3");
        vnukovo.setCountryName("Россия");
        vnukovo.setIsDeleted(false);

        koltcovo = new Destination();
        koltcovo.setId(6L);
        koltcovo.setAirportCode(Airport.SVX);
        koltcovo.setCityName("Екатеринбург");
        koltcovo.setTimezone("GMT +5");
        koltcovo.setCountryName("Россия");
        koltcovo.setIsDeleted(false);


        kazan = new Destination();
        kazan.setId(13L);
        kazan.setAirportCode(Airport.KZN);
        kazan.setCityName("Казань");
        kazan.setTimezone("GMT +3");
        kazan.setCountryName("Россия");
        kazan.setIsDeleted(false);


        //<editor-fold desc="Инициализация 6 FlightDTO (flight1DTO и flight2DTO - прямые (туда, обратно), остальные - непрямые">

        //<editor-fold desc="2 seats for Aircraft1">
        SeatDTO s1a1DTO = new SeatDTO();
        s1a1DTO.setId(1L);
        s1a1DTO.setSeatNumber("1A");
        s1a1DTO.setIsNearEmergencyExit(false);
        s1a1DTO.setIsLockedBack(true);
        s1a1DTO.setCategory(CategoryType.FIRST);
        s1a1DTO.setAircraftId(1L);

        SeatDTO s2a1DTO = new SeatDTO();
        s2a1DTO.setId(2L);
        s2a1DTO.setSeatNumber("1B");
        s2a1DTO.setIsNearEmergencyExit(true);
        s2a1DTO.setIsLockedBack(false);
        s2a1DTO.setCategory(CategoryType.BUSINESS);
        s2a1DTO.setAircraftId(1L);
        //</editor-fold>

        //<editor-fold desc="2 seats for Aircraft2">
        SeatDTO s1a2DTO = new SeatDTO();
        s1a2DTO.setId(3L);
        s1a2DTO.setSeatNumber("1A");
        s1a2DTO.setIsNearEmergencyExit(false);
        s1a2DTO.setIsLockedBack(true);
        s1a2DTO.setCategory(CategoryType.FIRST);
        s1a2DTO.setAircraftId(2L);

        SeatDTO s2a2DTO = new SeatDTO();
        s2a2DTO.setId(4L);
        s2a2DTO.setSeatNumber("1B");
        s2a2DTO.setIsNearEmergencyExit(true);
        s2a2DTO.setIsLockedBack(false);
        s2a2DTO.setCategory(CategoryType.BUSINESS);
        s2a2DTO.setAircraftId(2L);
        //</editor-fold>

        //<editor-fold desc="Create Flight1_(VKO->SVX)_Whith_Aircraft1_01.04.2023">
        FlightSeatDTO fs1f1DTO = new FlightSeatDTO();
        fs1f1DTO.setId(1L);
        fs1f1DTO.setFare(4800);
        fs1f1DTO.setIsRegistered(false);
        fs1f1DTO.setIsSold(false);
        fs1f1DTO.setIsBooked(false);
        fs1f1DTO.setFlightId(1L);
        fs1f1DTO.setSeat(s1a1DTO);
        fs1f1DTO.setCategory(CategoryType.FIRST);

        FlightSeatDTO fs2f1DTO = new FlightSeatDTO();
        fs2f1DTO.setId(2L);
        fs2f1DTO.setFare(3500);
        fs2f1DTO.setIsRegistered(false);
        fs2f1DTO.setIsSold(false);
        fs2f1DTO.setIsBooked(false);
        fs2f1DTO.setFlightId(1L);
        fs2f1DTO.setSeat(s2a1DTO);
        fs2f1DTO.setCategory(CategoryType.BUSINESS);

        flight1DTO = new FlightDTO();
        flight1DTO.setId(1L);
        flight1DTO.setCode("VKOSVX");
        flight1DTO.setSeats(List.of(fs1f1DTO, fs2f1DTO));
        flight1DTO.setAirportFrom(Airport.VKO);
        flight1DTO.setAirportTo(Airport.SVX);
        flight1DTO.setDepartureDateTime(LocalDateTime.of(2023, 4, 1, 1, 0, 0));
        flight1DTO.setArrivalDateTime(LocalDateTime.of(2023, 4, 1, 2, 0, 0));
        flight1DTO.setAircraftId(1L);
        flight1DTO.setFlightStatus(FlightStatus.COMPLETED);
        //</editor-fold>

        //<editor-fold desc="Create Flight2_(SVX->VKO)_Whith_Aircraft1_02.04.2023">
        FlightSeatDTO fs1f2DTO = new FlightSeatDTO();
        fs1f2DTO.setId(3L);
        fs1f2DTO.setFare(4800);
        fs1f2DTO.setIsRegistered(false);
        fs1f2DTO.setIsSold(false);
        fs1f2DTO.setIsBooked(false);
        fs1f2DTO.setFlightId(2L);
        fs1f2DTO.setSeat(s1a1DTO);
        fs1f2DTO.setCategory(CategoryType.FIRST);

        FlightSeatDTO fs2f2DTO = new FlightSeatDTO();
        fs2f2DTO.setId(4L);
        fs2f2DTO.setFare(3500);
        fs2f2DTO.setIsRegistered(false);
        fs2f2DTO.setIsSold(false);
        fs2f2DTO.setIsBooked(false);
        fs2f2DTO.setFlightId(2L);
        fs2f2DTO.setSeat(s2a1DTO);
        fs2f2DTO.setCategory(CategoryType.BUSINESS);

        flight2DTO = new FlightDTO();
        flight2DTO.setId(2L);
        flight2DTO.setCode("SVXVKO");
        flight2DTO.setSeats(List.of(fs1f2DTO, fs2f2DTO));
        flight2DTO.setAirportFrom(Airport.SVX);
        flight2DTO.setAirportTo(Airport.VKO);
        flight2DTO.setDepartureDateTime(LocalDateTime.of(2023, 4, 2, 5, 0, 0));
        flight2DTO.setArrivalDateTime(LocalDateTime.of(2023, 4, 2, 6, 0, 0));
        flight2DTO.setAircraftId(1L);
        flight2DTO.setFlightStatus(FlightStatus.COMPLETED);
        //</editor-fold>

        //<editor-fold desc="Create Flight3_(VKO->KZN)_Whith_Aircraft2_01.04.2023">
        FlightSeatDTO fs1f3DTO = new FlightSeatDTO();
        fs1f3DTO.setId(5L);
        fs1f3DTO.setFare(4800);
        fs1f3DTO.setIsRegistered(false);
        fs1f3DTO.setIsSold(false);
        fs1f3DTO.setIsBooked(false);
        fs1f3DTO.setFlightId(3L);
        fs1f3DTO.setSeat(s1a2DTO);
        fs1f3DTO.setCategory(CategoryType.FIRST);

        FlightSeatDTO fs2f3DTO = new FlightSeatDTO();
        fs2f3DTO.setId(6L);
        fs2f3DTO.setFare(3500);
        fs2f3DTO.setIsRegistered(false);
        fs2f3DTO.setIsSold(false);
        fs2f3DTO.setIsBooked(false);
        fs2f3DTO.setFlightId(3L);
        fs2f3DTO.setSeat(s2a2DTO);
        fs2f3DTO.setCategory(CategoryType.BUSINESS);

        flight3DTO = new FlightDTO();
        flight3DTO.setId(3L);
        flight3DTO.setCode("VKOKZN");
        flight3DTO.setSeats(List.of(fs1f3DTO, fs2f3DTO));
        flight3DTO.setAirportFrom(Airport.VKO);
        flight3DTO.setAirportTo(Airport.KZN);
        flight3DTO.setDepartureDateTime(LocalDateTime.of(2023, 4, 1, 1, 0, 0));
        flight3DTO.setArrivalDateTime(LocalDateTime.of(2023, 4, 1, 3, 0, 0));
        flight3DTO.setAircraftId(2L);
        flight3DTO.setFlightStatus(FlightStatus.COMPLETED);
        //</editor-fold>

        //<editor-fold desc="Create Flight4_(KZN->SVX)_Whith_Aircraft2_01.04.2023">
        FlightSeatDTO fs1f4DTO = new FlightSeatDTO();
        fs1f4DTO.setId(7L);
        fs1f4DTO.setFare(4800);
        fs1f4DTO.setIsRegistered(false);
        fs1f4DTO.setIsSold(false);
        fs1f4DTO.setIsBooked(false);
        fs1f4DTO.setFlightId(4L);
        fs1f4DTO.setSeat(s1a2DTO);
        fs1f4DTO.setCategory(CategoryType.FIRST);

        FlightSeatDTO fs2f4DTO = new FlightSeatDTO();
        fs2f4DTO.setId(8L);
        fs2f4DTO.setFare(3500);
        fs2f4DTO.setIsRegistered(false);
        fs2f4DTO.setIsSold(false);
        fs2f4DTO.setIsBooked(false);
        fs2f4DTO.setFlightId(4L);
        fs2f4DTO.setSeat(s2a2DTO);
        fs2f4DTO.setCategory(CategoryType.BUSINESS);

        flight4DTO = new FlightDTO();
        flight4DTO.setId(4L);
        flight4DTO.setCode("KZNSVX");
        flight4DTO.setSeats(List.of(fs1f4DTO, fs2f4DTO));
        flight4DTO.setAirportFrom(Airport.KZN);
        flight4DTO.setAirportTo(Airport.SVX);
        flight4DTO.setDepartureDateTime(LocalDateTime.of(2023, 4, 1, 7, 0, 0));
        flight4DTO.setArrivalDateTime(LocalDateTime.of(2023, 4, 1, 8, 0, 0));
        flight4DTO.setAircraftId(2L);
        flight4DTO.setFlightStatus(FlightStatus.COMPLETED);
        //</editor-fold>

        //<editor-fold desc="Create Flight5_(SVX->KZN)_Whith_Aircraft2_02.04.2023">
        FlightSeatDTO fs1f5DTO = new FlightSeatDTO();
        fs1f5DTO.setId(9L);
        fs1f5DTO.setFare(4800);
        fs1f5DTO.setIsRegistered(false);
        fs1f5DTO.setIsSold(false);
        fs1f5DTO.setIsBooked(false);
        fs1f5DTO.setFlightId(5L);
        fs1f5DTO.setSeat(s1a2DTO);
        fs1f5DTO.setCategory(CategoryType.FIRST);

        FlightSeatDTO fs2f5DTO = new FlightSeatDTO();
        fs2f5DTO.setId(10L);
        fs2f5DTO.setFare(3500);
        fs2f5DTO.setIsRegistered(false);
        fs2f5DTO.setIsSold(false);
        fs2f5DTO.setIsBooked(false);
        fs2f5DTO.setFlightId(5L);
        fs2f5DTO.setSeat(s2a2DTO);
        fs2f5DTO.setCategory(CategoryType.BUSINESS);

        flight5DTO = new FlightDTO();
        flight5DTO.setId(5L);
        flight5DTO.setCode("SVXKZN");
        flight5DTO.setSeats(List.of(fs1f5DTO, fs2f5DTO));
        flight5DTO.setAirportFrom(Airport.SVX);
        flight5DTO.setAirportTo(Airport.KZN);
        flight5DTO.setDepartureDateTime(LocalDateTime.of(2023, 4, 2, 2, 0, 0));
        flight5DTO.setArrivalDateTime(LocalDateTime.of(2023, 4, 2, 3, 0, 0));
        flight5DTO.setAircraftId(2L);
        flight5DTO.setFlightStatus(FlightStatus.COMPLETED);
        //</editor-fold>

        //<editor-fold desc="Create Flight6_(KZN->VKO)_Whith_Aircraft2_02.04.2023">
        FlightSeatDTO fs1f6DTO = new FlightSeatDTO();
        fs1f6DTO.setId(11L);
        fs1f6DTO.setFare(4800);
        fs1f6DTO.setIsRegistered(false);
        fs1f6DTO.setIsSold(false);
        fs1f6DTO.setIsBooked(false);
        fs1f6DTO.setFlightId(6L);
        fs1f6DTO.setSeat(s1a2DTO);
        fs1f6DTO.setCategory(CategoryType.FIRST);

        FlightSeatDTO fs2f6DTO = new FlightSeatDTO();
        fs2f6DTO.setId(12L);
        fs2f6DTO.setFare(3500);
        fs2f6DTO.setIsRegistered(false);
        fs2f6DTO.setIsSold(false);
        fs2f6DTO.setIsBooked(false);
        fs2f6DTO.setFlightId(6L);
        fs2f6DTO.setSeat(s2a2DTO);
        fs2f6DTO.setCategory(CategoryType.BUSINESS);

        flight6DTO = new FlightDTO();
        flight6DTO.setId(6L);
        flight6DTO.setCode("KZNVKO");
        flight6DTO.setSeats(List.of(fs1f6DTO, fs2f6DTO));
        flight6DTO.setAirportFrom(Airport.KZN);
        flight6DTO.setAirportTo(Airport.VKO);
        flight6DTO.setDepartureDateTime(LocalDateTime.of(2023, 4, 2, 8, 0, 0));
        flight6DTO.setArrivalDateTime(LocalDateTime.of(2023, 4, 2, 9, 0, 0));
        flight6DTO.setAircraftId(2L);
        flight6DTO.setFlightStatus(FlightStatus.COMPLETED);
        //</editor-fold>
        //</editor-fold>


        //<editor-fold desc="Инициализация 6 Flight (flight1 и flight2 - прямые (туда, обратно), остальные - непрямые">

        //<editor-fold desc="Create Flight1_(VKO->SVX)_Whith_Aircraft1_01.04.2023">
        FlightSeat fs1f1 = new FlightSeat();
        fs1f1.setId(1L);
        fs1f1.setFare(4800);
        fs1f1.setIsRegistered(false);
        fs1f1.setIsSold(false);
        fs1f1.setIsBooked(false);
        fs1f1.setFlight(flight1);
//        fs1f1.setSeat(s1a1DTO);

        FlightSeat fs2f1 = new FlightSeat();
        fs2f1.setId(2L);
        fs2f1.setFare(3500);
        fs2f1.setIsRegistered(false);
        fs2f1.setIsSold(false);
        fs2f1.setIsBooked(false);
        fs2f1.setFlight(flight1);
//        fs2f1.setSeat(s2a1DTO);


        Aircraft aircraft1 = new Aircraft();
        aircraft1.setId(1L);

        flight1 = new Flight();
        flight1.setId(1L);
        flight1.setCode("VKOSVX");
        flight1.setSeats(List.of(fs1f1, fs2f1));
        flight1.setFrom(vnukovo);
        flight1.setTo(koltcovo);
        flight1.setDepartureDateTime(LocalDateTime.of(2023, 4, 1, 1, 0, 0));
        flight1.setArrivalDateTime(LocalDateTime.of(2023, 4, 1, 2, 0, 0));
        flight1.setAircraft(aircraft1);
        flight1.setFlightStatus(FlightStatus.COMPLETED);
        //</editor-fold>


        //<editor-fold desc="Create Flight2_(SVX->VKO)_Whith_Aircraft1_02.04.2023">
        FlightSeat fs1f2 = new FlightSeat();
        fs1f2.setId(3L);
        fs1f2.setFare(4800);
        fs1f2.setIsRegistered(false);
        fs1f2.setIsSold(false);
        fs1f2.setIsBooked(false);
        fs1f2.setFlight(flight2);
//        fs1f2.setSeat(s1a1DTO);

        FlightSeat fs2f2 = new FlightSeat();
        fs2f2.setId(4L);
        fs2f2.setFare(3500);
        fs2f2.setIsRegistered(false);
        fs2f2.setIsSold(false);
        fs2f2.setIsBooked(false);
        fs2f2.setFlight(flight2);
//        fs2f2.setSeat(s2a1DTO);

        Aircraft aircraft2 = new Aircraft();
        aircraft2.setId(2L);

        flight2 = new Flight();
        flight2.setId(2L);
        flight2.setCode("SVXVKO");
        flight2.setSeats(List.of(fs1f2, fs2f2));
        flight2.setFrom(koltcovo);
        flight2.setTo(vnukovo);
        flight2.setDepartureDateTime(LocalDateTime.of(2023, 4, 2, 5, 0, 0));
        flight2.setArrivalDateTime(LocalDateTime.of(2023, 4, 2, 6, 0, 0));
        flight2.setAircraft(aircraft2);
        flight2.setFlightStatus(FlightStatus.COMPLETED);
        //</editor-fold>


        // </editor-fold>

        //<editor-fold desc="Search1 VKO->SVX Direct">
        searchDirect = new Search();
        searchDirect.setFrom(Airport.VKO);
        searchDirect.setTo(Airport.SVX);
        searchDirect.setDepartureDate(LocalDate.of(2023, 4, 1));
        searchDirect.setReturnDate(LocalDate.of(2023, 4, 2));
        searchDirect.setNumberOfPassengers(1);
        //</editor-fold>


    }

    @DisplayName("search, Positive test direct flight without return flights")
    @Test
    public void shouldReturnSearchResultWhithDirectDepartFlights() {
        System.out.println("qwerty");


       var s = flightMapper.flightDTOtoFlight(flight1DTO, aircraftService, destinationService, ticketService,flightSeatService);

        System.out.println(s.getId());


        doReturn(flight1DTO).when(flightMapper).flightToFlightDTO(flight1, flightService);
        doReturn(flight2DTO).when(flightMapper).flightToFlightDTO(flight2, flightService);


        doReturn(2).when(flightSeatService).getNumberOfFreeSeatOnFlight(flight1);
        doReturn(2).when(flightSeatService).getNumberOfFreeSeatOnFlight(flight2);

        doReturn(vnukovo).when(destinationService).getDestinationByAirportCode(searchDirect.getFrom());
        doReturn(koltcovo).when(destinationService).getDestinationByAirportCode(searchDirect.getTo());

        doReturn(List.of(flight1, flight2)).when(flightService).getListNonDirectFlightsByFromAndToAndDepartureDate(vnukovo.getId().intValue(), koltcovo.getId().intValue(),
                Date.valueOf(searchDirect.getDepartureDate()));


        doReturn(Collections.emptyList()).when(flightService).getListNonDirectFlightsByFromAndToAndDepartureDate(vnukovo.getId().intValue(), koltcovo.getId().intValue(),
                Date.valueOf(searchDirect.getReturnDate()));



        var a = searchService.search(searchDirect.getFrom(), searchDirect.getTo(), searchDirect.getDepartureDate(), null,
                1);


    }


      List<FlightDTO> directDepartFlightDTOs = List.of(flight1);
        List<Flight> directDepartFlights = directDepartFlightDTOs.stream()
                .map(f -> Mappers.getMapper(FlightMapper.class)
                        .flightDTOtoFlight(f, aircraftService, destinationService, ticketService, flightSeatService))
                .collect(Collectors.toList());

        when(flightService.getListDirectFlightsByFromAndToAndDepartureDate(
                Airport.VKO,
                Airport.SVX,
                Date.valueOf(LocalDate.of(2023, 4, 1))
        )).thenReturn(directDepartFlights);

        List<FlightDTO> directReturnFlightDTOs = List.of(flight1);
        List<Flight> directReturnFlights = directReturnFlightDTOs.stream()
                .map(f -> flightMapper.flightDTOtoFlight(
                        f,
                        aircraftService,
                        destinationService,
                        ticketService,
                        flightSeatService
                )).collect(Collectors.toList());
        when(flightService.getListDirectFlightsByFromAndToAndDepartureDate(
                searchDirect.getFrom(),
                searchDirect.getTo(),
                Date.valueOf(searchDirect.getReturnDate())
        )).thenReturn(directReturnFlights);*//*

        List<FlightDTO> nonDirectDepartFlightDTOs = List.of(flight3, flight4);
        List<Flight> nonDirectDepartFlights = nonDirectDepartFlightDTOs.stream()
                .map(f -> Mappers.getMapper(FlightMapper.class)
                        .flightDTOtoFlight(f, aircraftService, destinationService, ticketService, flightSeatService))
                .collect(Collectors.toList());
        when(flightService.getListNonDirectFlightsByFromAndToAndDepartureDate(
              1, // destinationService.getDestinationByAirportCode(searchDirect.getFrom()).getId().intValue(),
              13, // destinationService.getDestinationByAirportCode(searchDirect.getTo()).getId().intValue(),
                Date.valueOf(searchDirect.getDepartureDate())
        )).thenReturn(nonDirectDepartFlights);

       List<FlightDTO> nonDirectReturnFlightDTOs = List.of(flight5, flight6);
        List<Flight> nonDirectReturnFlights = nonDirectReturnFlightDTOs.stream()
                .map(f -> flightMapper.flightDTOtoFlight(
                        f,
                        aircraftService,
                        destinationService,
                        ticketService,
                        flightSeatService
                )).collect(Collectors.toList());
        when(flightService.getListNonDirectFlightsByFromAndToAndDepartureDate(
                destinationService.getDestinationByAirportCode(searchNonDirect.getFrom()).getId().intValue(),
                destinationService.getDestinationByAirportCode(searchNonDirect.getTo()).getId().intValue(),
                Date.valueOf(searchNonDirect.getReturnDate())
        )).thenReturn(nonDirectReturnFlights);

        Flight f1 = Mappers.getMapper(FlightMapper.class)
                .flightDTOtoFlight(flight1, aircraftService, destinationService, ticketService, flightSeatService);

        when(flightSeatService.getNumberOfFreeSeatOnFlight(f1)).thenReturn(2);

        Flight f2 = Mappers.getMapper(FlightMapper.class)
                .flightDTOtoFlight(flight2, aircraftService, destinationService, ticketService, flightSeatService);
        when(flightSeatService.getNumberOfFreeSeatOnFlight(f2)).thenReturn(2);

        searchDirect.setReturnDate(null);

        var result = searchService.search(searchDirect.getFrom(), searchDirect.getTo(), searchDirect.getDepartureDate(),
                null, searchDirect.getNumberOfPassengers());




    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
    //
//
//
//    @DisplayName("ХХХ search(), Positive test search one direct depart flight and one direct return flights")
//    @Test
//    public void shouldReturnSearchResultWhithOneDirectDepartFlightsAndOneDirectReturnFlight() {
//
//        Search search = new Search();
//        search.setFrom(Airport.VKO);
//        search.setTo(Airport.SVX);
//        search.setDepartureDate(LocalDate.of(2023, 4, 1));
//        search.setReturnDate(LocalDate.of(2023, 4, 2));
//        search.setNumberOfPassengers(1);
//
//        Destination fromVnukovo = new Destination();
//        fromVnukovo.setId(1L);
//        fromVnukovo.setAirportCode(Airport.VKO);
//        fromVnukovo.setCityName("Москва");
//        fromVnukovo.setTimezone("GMT +3");
//        fromVnukovo.setCountryName("Россия");
//        fromVnukovo.setIsDeleted(false);
//
//        Destination toKoltcovo = new Destination();
//        toKoltcovo.setId(6L);
//        toKoltcovo.setAirportCode(Airport.SVX);
//        toKoltcovo.setCityName("Екатеринбург");
//        toKoltcovo.setTimezone("GMT +5");
//        toKoltcovo.setCountryName("Россия");
//        toKoltcovo.setIsDeleted(false);
//
//
//        Aircraft aircraft1 = new Aircraft();
//        aircraft1.setId(1L);
//        Flight directDepartureFlight = new Flight();
//        directDepartureFlight.setId(1L);
//        directDepartureFlight.setCode("VKOSVX");
//        directDepartureFlight.setFrom(fromVnukovo);
//        directDepartureFlight.setTo(toKoltcovo);
//        directDepartureFlight.setDepartureDateTime(LocalDateTime.of(2023, 4, 1, 1, 0, 0));
//        directDepartureFlight.setArrivalDateTime(LocalDateTime.of(2023, 4, 1, 2, 0, 0));
//        directDepartureFlight.setFlightStatus(FlightStatus.COMPLETED);
//        directDepartureFlight.setAircraft(aircraft1);
//        directDepartureFlight.setSeats(new ArrayList<FlightSeat>());
//
//
//        Aircraft aircraft2 = new Aircraft();
//        aircraft2.setId(1L);
//        Flight directReturnFlight = new Flight();
//        directReturnFlight.setId(2L);
//        directReturnFlight.setCode("SVXVKO");
//        directReturnFlight.setFrom(toKoltcovo);
//        directReturnFlight.setTo(fromVnukovo);
//        directReturnFlight.setDepartureDateTime(LocalDateTime.of(2023, 4, 2, 5, 0, 0));
//        directReturnFlight.setArrivalDateTime(LocalDateTime.of(2023, 4, 2, 6, 0, 0));
//        directReturnFlight.setFlightStatus(FlightStatus.COMPLETED);
//        directReturnFlight.setAircraft(aircraft2);
//        directReturnFlight.setSeats(new ArrayList<FlightSeat>());
//
////        FlightDTO directDepartureFlightDTO = new FlightDTO();
////        directDepartureFlightDTO.setId(1L);
////        directDepartureFlightDTO.setCode("VKOSVX");
////        directDepartureFlightDTO.setAirportFrom(Airport.VKO);
////        directDepartureFlightDTO.setAirportTo(Airport.SVX);
////        directDepartureFlightDTO.setDepartureDateTime(LocalDateTime.of(2023, 4, 1, 1, 0, 0));
////        directDepartureFlightDTO.setArrivalDateTime(LocalDateTime.of(2023, 4, 1, 2, 0, 0));
////        directDepartureFlightDTO.setFlightStatus(FlightStatus.COMPLETED);
////        directDepartureFlightDTO.setAircraftId(1L);
////        directDepartureFlightDTO.setSeats(new ArrayList<FlightSeatDTO>());
////
////        FlightDTO directReturnFlightDTO = new FlightDTO();
////        directReturnFlightDTO.setId(2L);
////        directReturnFlightDTO.setCode("SVXVKO");
////        directReturnFlightDTO.setAirportFrom(Airport.SVX);
////        directReturnFlightDTO.setAirportTo(Airport.VKO);
////        directReturnFlightDTO.setDepartureDateTime(LocalDateTime.of(2023, 4, 2, 5, 0, 0));
////        directReturnFlightDTO.setArrivalDateTime(LocalDateTime.of(2023, 4, 2, 6, 0, 0));
////        directReturnFlightDTO.setFlightStatus(FlightStatus.COMPLETED);
////        directReturnFlightDTO.setAircraftId(2L);
////        directReturnFlightDTO.setSeats(new ArrayList<FlightSeatDTO>());
////
////        var directDepartureFlightDTOMap = doReturn(directDepartureFlightDTO).when(flightMapper).flightToFlightDTO(eq(directDepartureFlight), any());
////
////        var directReturnFlightDTOMap = doReturn(directReturnFlightDTO).when(flightMapper).flightToFlightDTO(eq(directReturnFlight), any());
//        var listDirectDepartFlight = List.of(directDepartureFlight);
//        var departureDate = Date.valueOf(search.getDepartureDate());
//        doReturn(listDirectDepartFlight).when(flightService).getListDirectFlightsByFromAndToAndDepartureDate(
//                any(Airport.class), any(Airport.class), eq(departureDate)
//        );
//
//        var listDirectReturnFlight = List.of(directReturnFlight);
//        var returnDate = Date.valueOf(search.getReturnDate());
//        doReturn(listDirectReturnFlight).when(flightService).getListDirectFlightsByFromAndToAndDepartureDate(
//                any(Airport.class), any(Airport.class), eq(returnDate)
//        );
//
//
//        doReturn(new ArrayList<Flight>()).when(flightService)
//                .getListNonDirectFlightsByFromAndToAndDepartureDate(
//                        fromVnukovo.getId().intValue(),
//                        toKoltcovo.getId().intValue(),
//                        Date.valueOf(search.getDepartureDate())
//                );
//
//        doReturn(new ArrayList<Flight>())
//                .when(flightService).getListNonDirectFlightsByFromAndToAndDepartureDate(
//                fromVnukovo.getId().intValue(),
//                toKoltcovo.getId().intValue(),
//                Date.valueOf(search.getReturnDate())
//        );
//
//        doReturn(fromVnukovo).when(destinationService).getDestinationByAirportCode(search.getFrom());
//
//        doReturn(toKoltcovo).when(destinationService).getDestinationByAirportCode(search.getTo());
//
//        doReturn(2).when(flightSeatService).getNumberOfFreeSeatOnFlight(any(Flight.class));
//
//
//        SearchResult result = searchService.search(
//                search.getFrom(),
//                search.getTo(),
//                search.getDepartureDate(),
//                search.getReturnDate(),
//                search.getNumberOfPassengers()
//        );
//
//
//        assertEquals(listDirectDepartFlight.size(), 1);
//        assertEquals(listDirectDepartFlight.size(), result.getDepartFlights().size());
//        assertEquals(listDirectDepartFlight.get(0).getId(), result.getDepartFlights().get(0).getId());
//        assertEquals(listDirectDepartFlight.get(0).getCode(), result.getDepartFlights().get(0).getCode());
//        assertEquals(listDirectDepartFlight.get(0).getDepartureDateTime(), result.getDepartFlights().get(0).getDepartureDateTime());
//        assertEquals(listDirectDepartFlight.get(0).getArrivalDateTime(), result.getDepartFlights().get(0).getArrivalDateTime());
//        assertEquals(listDirectDepartFlight.get(0).getFrom().getAirportCode(), result.getDepartFlights().get(0).getAirportFrom());
//        assertEquals(listDirectDepartFlight.get(0).getTo().getAirportCode(), result.getDepartFlights().get(0).getAirportTo());
//        assertEquals(listDirectDepartFlight.get(0).getFlightStatus(), result.getDepartFlights().get(0).getFlightStatus());
//        assertEquals(listDirectDepartFlight.get(0).getAircraft().getId(), result.getDepartFlights().get(0).getAircraftId());
//
//        assertEquals(listDirectReturnFlight.size(), 1);
//        assertEquals(listDirectReturnFlight.size(), result.getReturnFlights().size());
//        assertEquals(listDirectReturnFlight.get(0).getId(), result.getReturnFlights().get(0).getId());
//        assertEquals(listDirectReturnFlight.get(0).getCode(), result.getReturnFlights().get(0).getCode());
//        assertEquals(listDirectReturnFlight.get(0).getDepartureDateTime(), result.getReturnFlights().get(0).getDepartureDateTime());
//        assertEquals(listDirectReturnFlight.get(0).getArrivalDateTime(), result.getReturnFlights().get(0).getArrivalDateTime());
//        assertEquals(listDirectReturnFlight.get(0).getFrom().getAirportCode(), result.getReturnFlights().get(0).getAirportFrom());
//        assertEquals(listDirectReturnFlight.get(0).getTo().getAirportCode(), result.getReturnFlights().get(0).getAirportTo());
//        assertEquals(listDirectReturnFlight.get(0).getFlightStatus(), result.getReturnFlights().get(0).getFlightStatus());
//        assertEquals(listDirectReturnFlight.get(0).getAircraft().getId(), result.getReturnFlights().get(0).getAircraftId());
//
//
//    }








}
